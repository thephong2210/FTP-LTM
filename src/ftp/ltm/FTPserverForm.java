/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ftp.ltm;

import java.awt.Label;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author theph
 */
public class FTPserverForm extends javax.swing.JFrame {

    private static ServerSocket serverSocket = null;
    private static Socket socket = null;
    private static DataInputStream din = null;
    private static DataOutputStream dout = null;

    public FTPserverForm() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel_status = new javax.swing.JLabel();
        jLabel_client = new javax.swing.JLabel();
        jLabel_recievedFile = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        jLabel1.setText("Server");

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel2.setText("Status :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel3.setText("Client Connection:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel4.setText("Recieved File :");

        jLabel_status.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel_status.setText("Server running");

        jLabel_client.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel_client.setText("no new Client");

        jLabel_recievedFile.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel_recievedFile.setText("no file recieved");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel_recievedFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel_client, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel_status))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel_client))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel_recievedFile))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FTPserverForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FTPserverForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FTPserverForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FTPserverForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FTPserverForm().setVisible(true);

            }
        });
        FTPserverForm server = new FTPserverForm();
        server.StartServer(2210);
    }

    public void StartServer(int port) throws IOException {
        serverSocket = new ServerSocket(port);
        //jLabel_client.setText("new Client accepted");
        while (true) {
            System.out.println("Waiting for Connection ...");
            transferfile t = new transferfile(serverSocket.accept());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    public static javax.swing.JLabel jLabel_client;
    public static javax.swing.JLabel jLabel_recievedFile;
    public static javax.swing.JLabel jLabel_status;
    // End of variables declaration//GEN-END:variables

}

class transferfile extends Thread {

    Socket ClientSoc;

    DataInputStream din;
    DataOutputStream dout;

    transferfile(Socket soc) {
        try {
            ClientSoc = soc;
            din = new DataInputStream(ClientSoc.getInputStream());
            dout = new DataOutputStream(ClientSoc.getOutputStream());
            System.out.println("FTP Client Connected ...");
            start();

        } catch (Exception ex) {
        }
    }

    public void receiveFile(String user,String url) throws FileNotFoundException, IOException {

//        in = socket.getInputStream(); // nhận file 
        //C:\Users\theph\OneDrive\Máy tính\test.txt
        StringTokenizer st = new StringTokenizer(url, "\\");
        String nameFile = null;
        while (st.hasMoreTokens()) {
            System.out.println(st.nextToken());
            nameFile = st.nextToken(); //lấy tên file
        }
        File f = new File(".\\FILE-SERVER\\" +user+"\\"+ nameFile);
        FileOutputStream fout = new FileOutputStream(f);
        int ch;
        String temp;
        do {
            temp = din.readUTF();
            ch = Integer.parseInt(temp);
            if (ch != -1) {
                fout.write(ch);
            }
        } while (ch != -1);
        fout.close();
        System.out.println("Server đã nhận file");
    }

    public void sendFile(String user,String nameFile) {
        String urlDir = ".\\FILE-SERVER\\"+user+"\\";

        File file = new File(urlDir + nameFile);

        if (!file.exists()) {
            try {
                dout.writeUTF("File not Exists");
                dout.flush();
            } catch (Exception e) {
            }
        } else {

            try {
                dout.writeUTF("File Exists");
                dout.flush();
                FileInputStream fin = new FileInputStream(file);
                int ch;
                do {
                    ch = fin.read();
                    dout.writeUTF(String.valueOf(ch));
                } while (ch != -1);
                fin.close();
                System.out.println("server đã gửi file");

            } catch (FileNotFoundException ex) {
                Logger.getLogger(FTPclientFrom.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FTPclientFrom.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void run() {

        while (true) {
            try {
                String line = din.readUTF();
                if (line.equals("send")) {
                    String user = din.readUTF();
                    String urlFile = din.readUTF();
                    System.out.println(user);
                    receiveFile(user,urlFile);
                }
                if (line.equals("receive")) {
                    String user = din.readUTF();
                    String nameFile = din.readUTF();
                    System.out.println(user);
                    sendFile(user,nameFile);

                }
            } catch (Exception e) {
            }
        }
    }
}
